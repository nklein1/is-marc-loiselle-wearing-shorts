{"version":3,"sources":["containers/whypage/whypage.module.scss","containers/homepage/homepage.module.scss","helpers/helpers.js","components/answer/answer.jsx","containers/homepage/homepage.jsx","containers/whypage/whypage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","ajaxHelper","method","uri","successCallback","fetch","process","then","result","json","catch","response","console","log","decideAttire","data","main","wind","temperature","temp_max","speed","isMarkWearingShorts","isForecastOutdated","forecastData","toUpdate","dt","today","Date","lastUpdated","Math","abs","getTime","Answer","pageType","verdict","renderVerdict","HomePage","props","saveWeatherData","sessionStorage","setItem","JSON","stringify","setState","weather","updateForecast","parseError","state","parse","getItem","this","className","styles","container","Grid","item","md","to","React","Component","WhyPage","temp","errorCallback","subContainer","href","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2501340.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"whypage_container__-AN-b\",\"subContainer\":\"whypage_subContainer__3YqFC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"homepage_container__2W7CF\"};","export function ajaxHelper(method, uri, successCallback) {\n  return (\n    fetch(process.env.REACT_APP_API_HOST + uri, { method: method })\n    .then(result => result.json())\n    .then(result => {\n      successCallback(result);\n    })\n    .catch((response) => {\n      console.log('Received the following server error response while fetching Weather: ', response);\n    })\n  );\n}\n\nexport function decideAttire(data) {\n  if (data && data.main && data.wind) {\n    let temperature = data.main.temp_max;\n    let wind = data.wind.speed;\n    let isMarkWearingShorts = true;\n\n    if (temperature < 40) {\n      isMarkWearingShorts = false;\n    } else if (temperature <= 50 && wind > 15) {\n      isMarkWearingShorts = false;\n    }\n    return isMarkWearingShorts;\n  } else {\n    return 'loading';\n  }\n}\n\n// Return true if forecast was last updated > 2 hours ago\nexport function isForecastOutdated(forecastData) {\n  let toUpdate = true;\n      console.log('forecastData', forecastData);\n  if (forecastData && forecastData.dt) {\n    let today = new Date();\n    let lastUpdated = new Date(forecastData.dt * 1000);\n    let hoursSinceLastUpdate = Math.abs(today.getTime() - lastUpdated.getTime()) / 36e5;\n    if (hoursSinceLastUpdate <= 2) {\n      toUpdate = false;\n    }\n  }\n  return toUpdate;\n}","import React from 'react';\n// import styles from './Answer.module.scss';\n\nconst Answer = ({ isMarkWearingShorts, pageType }) => {\n  const renderVerdict = () => {\n    let verdict = isMarkWearingShorts;\n    if (pageType === 'home') {\n      verdict = 'Hell Yeah';\n      if (isMarkWearingShorts === false) {\n        verdict = 'Nope Nope Nope';\n      }\n    } else if (pageType === 'why') {\n      verdict = 'is definitely';\n      if (isMarkWearingShorts === false) {\n        verdict = \"probably isn't\";\n      }\n    }\n    return verdict;\n  }\n  return (\n    <span> { renderVerdict() } </span>\n  );\n};\n\nexport { Answer };\nexport default Answer;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\n\nimport { ajaxHelper, decideAttire, isForecastOutdated } from '../../helpers/helpers.js';\nimport Answer from '../../components/answer/answer.jsx';\nimport styles from './homepage.module.scss';\n\nclass HomePage extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      weather: JSON.parse(sessionStorage.getItem('weather')) || null\n    }\n  }\n\n  componentDidMount() {\n    // Avoid re-fetching weather data to reduce API usage\n    if (!this.state.weather || isForecastOutdated(this.state.weather) === true) {\n      this.updateForecast();\n    }\n  }\n\n  // Save data to session storage & react state\n  saveWeatherData = (data) => {\n    sessionStorage.setItem('weather', JSON.stringify(data));\n    this.setState({ weather: data });\n  }\n\n  updateForecast = () => {\n    let cityID = '4930956';\n    let units = 'imperial';\n    let uri = '?id=' + cityID + '&units=' + units + '&APPID=' + process.env.REACT_APP_API_TOKEN;\n    ajaxHelper('GET', uri, this.saveWeatherData, this.parseError);\n  }\n\n  render() {\n    return (\n      <div className={styles.container}>\n        <Grid container>\n          <Grid item md={12} >\n            <h1>Is Marc Loiselle wearing shorts?</h1>\n          </Grid>\n          <Grid item md={12}>\n            <h1>\n              <Answer\n              isMarkWearingShorts={ decideAttire(this.state.weather) }\n              pageType={'home'} />\n            </h1>\n          </Grid>\n          <Grid item md={12}>\n            <Link to=\"/why\">Why?</Link>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport { HomePage };\nexport default HomePage;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\n\nimport { ajaxHelper, decideAttire, isForecastOutdated } from '../../helpers/helpers.js';\nimport Answer from '../../components/answer/answer.jsx';\nimport styles from './whypage.module.scss';\n\nclass WhyPage extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      weather: JSON.parse(sessionStorage.getItem('weather')) || null,\n      temp: JSON.parse(sessionStorage.getItem('temp')) || null,\n      wind: JSON.parse(sessionStorage.getItem('wind')) || null,\n    }\n  }\n\n  componentDidMount() {\n    // Avoid re-fetching weather data to reduce API usage\n    if (!this.state.weather || isForecastOutdated(this.state.weather) === true) {\n      this.updateForecast();\n    }\n  }\n\n  // Save data to session storage & react state\n  saveWeatherData = (data) => {\n    const weather = data;\n    const temp = data.main.temp_max;\n    const wind = data.wind.speed;\n\n    sessionStorage.setItem('weather', JSON.stringify(data));\n    sessionStorage.setItem('temp', JSON.stringify(temp));\n    sessionStorage.setItem('wind', JSON.stringify(wind));\n\n    this.setState({\n      weather: weather,\n      temp: temp,\n      wind: wind\n    });\n  }\n\n  // Leaving these here so we can allow them to be customized by the user later\n  updateForecast = () => {\n    let cityID = '4930956';\n    let units = 'imperial';\n    let uri = '?id=' + cityID + '&units=' + units + '&APPID=' + process.env.REACT_APP_API_TOKEN;\n    ajaxHelper('GET', uri, this.saveWeatherData, this.errorCallback);\n  }\n\n  renderVerdict = () => {\n    let verdict = 'is definitely';\n    if (this.state.weather && decideAttire(this.state.weather) !== true) {\n      verdict = \"probably isn't\";\n    }\n    return verdict;\n  }\n\n  render() {\n    return (\n      <div className={styles.container}>\n        <Grid container className={styles.subContainer}>\n          <Grid item md={10}>\n            <h1>Marc Loiselle is a shorts man. He loves his shorts.</h1>\n          </Grid>\n          <Grid item md={8}>\n            <p>\n              And he wears shorts on nearly any day where the temperature is either higher than <strong>40°F</strong> OR higher than <strong>50°F</strong> if the wind speed is <strong>> 15mph</strong>.\n            </p>\n            <p>\n              Since the high temperature for today is <strong>{ this.state.temp }°F</strong>,\n              and the max wind speed is <strong>{ this.state.wind }mph</strong>,\n              Marc Loiselle\n              <strong>\n                <Answer isMarkWearingShorts={ decideAttire(this.state.weather) } pageType={'why'} />\n                wearing shorts\n              </strong>.\n            </p>\n          </Grid>\n          <Grid item md={6}>\n            <p>\n              Nick Klein found Marc Loiselle's dedication to shorts amusing, so he created this page using React and <a href=\"https://openweathermap.org/\">OpenWeatherMap's API</a>\n            </p>\n          </Grid>\n          <Grid item md={12}>\n            <Link to=\"/\">Back to Home</Link>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport { WhyPage };\nexport default WhyPage;\n","import React from 'react';\n// import { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { HashRouter, Route, Link } from \"react-router-dom\";\n\nimport HomePage from './containers/homepage/homepage.jsx';\nimport WhyPage from './containers/whypage/whypage.jsx';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <HashRouter basename='/is-marc-loiselle-wearing-shorts'>\n\n        <Route exact path='/' component={HomePage} />\n        <Route path='/why' component={WhyPage} />\n\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}